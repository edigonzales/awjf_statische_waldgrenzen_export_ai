import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

//def pathToTempFolder = System.getProperty("java.io.tmpdir")
File tmpFolder = new File("/tmp/gretl-share")
def pathToTempFolder = tmpFolder.getAbsolutePath()

def iliModelHoheitsgrenzen = "SO_Hoheitsgrenzen_Publikation_20170626"
def dbSchemaHoheitsgrenzen = "agi_hoheitsgrenzen_pub"

def iliModelAnnex = "OeREB_ExtractAnnex_V1_0"
def dbSchemaAnnex = "agi_oereb_annex"

def iliModelWaldgrenzen = "SO_AWJF_Statische_Waldgrenzen_20191119"
def dbSchemaWaldgrenzen = "awjf_statische_waldgrenze"

def iliModelMgdmWaldgrenzen = "Waldgrenzen_LV95_V1_1"
def dbSchemaMgdmWaldgrenzen = "awjf_statische_waldgrenzen_mgdm"
def mgdmWaldgrenzenXtfFileName = "ch.so.awjf.waldgrenzen.mgdm.xtf"
def mgdmWaldgrenzenZipFileName = "ch.so.awjf.waldgrenzen.mdgm.zip"

def aiLogin = aiUser + ":" + aiPwd

task createSchemaHoheitsgrenzen(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['schema/agi_hoheitsgrenzen_pub.sql']
}

task importDataHoheitsgrenzen(type: Ili2pgImport) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelHoheitsgrenzen
    dbschema = dbSchemaHoheitsgrenzen
    dataFile = file("ch.so.agi.hoheitsgrenzen.xtf")
    disableValidation = true
}

task createSchemaWaldgrenzen(type: SqlExecutor){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['schema/awjf_statische_waldgrenze.sql']
}

task importDataWaldgrenzen(type: Ili2pgImport) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelWaldgrenzen
    dbschema = dbSchemaWaldgrenzen
    dataFile = file("ch.so.awjf.statische_waldgrenze_edit.xtf")
    disableValidation = true
}

task createSchemaMgdmWaldgrenzen(type: SqlExecutor){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['schema/awjf_statische_waldgrenzen_mgdm.sql']
}

task createSchemaAnnex(type: SqlExecutor){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['schema/agi_oereb_annex.sql']
}

task importDataAnnex(type: Ili2pgImport) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelAnnex
    dbschema = dbSchemaAnnex
    dataFile = file("ch.so.agi.OeREB_extractAnnex.oereb.xtf")
    disableValidation = true
}

// GRETL-Job begins here...



task transferWaldgrenzen(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['truncate_all_awjf_statische_waldgrenzen_mgdm_tables.sql', 'awjf_statische_waldgrenzen_mgdm.sql']
}

task exportMgdmWaldgrenzen(type: Ili2pgExport, dependsOn: 'transferWaldgrenzen') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelMgdmWaldgrenzen
    dbschema = dbSchemaMgdmWaldgrenzen
    dataFile = file(mgdmWaldgrenzenXtfFileName)
    disableValidation = true
}

task validateMgdmWaldgrenzen(type: IliValidator, dependsOn: 'exportMgdmWaldgrenzen') {
    dataFiles = [file(mgdmWaldgrenzenXtfFileName)]
    logFile = "ilivalidator_waldgrenzen.log"
    //configFile = "config.toml"
    failOnError = false
}

task zipMgdmWaldgrenzen(type: Zip, dependsOn: 'validateMgdmWaldgrenzen'){
    from pathToTempFolder
    from "."
    include mgdmWaldgrenzenXtfFileName
    //include "config.toml"
    archiveName mgdmWaldgrenzenZipFileName
    destinationDir(file(pathToTempFolder))
}

task uploadMgdmWaldgrenzen(dependsOn: 'zipMgdmWaldgrenzen') {
    doLast {
        def response = ["curl", "-u", aiLogin, "-F", "topic=npl_waldgrenzen", "-F",
                        "lv95_file=@" + Paths.get(pathToTempFolder.toString(), mgdmWaldgrenzenZipFileName), "-F", "publish=true",
                        "https://" + aiServer + "/data_agg/interlis/import"].execute().text
        println(response)
        if (response.contains("false")) {
            throw new GradleException()
        }        
    }
}

